diff -ur llvm-4.0.0-original/tools/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp llvm-4.0.0/tools/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp
--- llvm-4.0.0-original/tools/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp	2017-03-18 17:57:36.000000000 -0400
+++ llvm-4.0.0/tools/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp	2017-03-24 15:19:09.000000000 -0400
@@ -24,12 +24,18 @@
 #include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
 #include <climits>
 
+#ifdef __APPLE__
+#include "clang/StaticAnalyzer/Checkers/MachInterface.h"
+#endif
+
 using namespace clang;
 using namespace ento;
 
 namespace {
 class GenericTaintChecker : public Checker< check::PostStmt<CallExpr>,
-                                            check::PreStmt<CallExpr> > {
+                                            check::PreStmt<CallExpr>,
+                                            check::PreStmt<ArraySubscriptExpr>,
+                                            check::BeginFunction > {
 public:
   static void *getTag() { static int Tag; return &Tag; }
 
@@ -37,11 +43,22 @@
 
   void checkPreStmt(const CallExpr *CE, CheckerContext &C) const;
 
+  // Look for tainted array subscripts
+  void checkPreStmt(const ArraySubscriptExpr *CE, CheckerContext &C) const;
+
+  // Mark function args that match certain syscall naming patterns tainted.
+  void checkBeginFunction(CheckerContext &C) const;
+
 private:
   static const unsigned InvalidArgIndex = UINT_MAX;
   /// Denotes the return vale.
   static const unsigned ReturnValueIndex = UINT_MAX - 1;
 
+#ifdef __APPLE__
+  // Maps XNU MIG functions to argument numbers of user-tainted args
+  mutable std::multimap<const IdentifierInfo *, size_t> MachInterface;
+#endif
+
   mutable std::unique_ptr<BugType> BT;
   inline void initBugType() const {
     if (!BT)
@@ -86,6 +103,14 @@
   ProgramStateRef postSocket(const CallExpr *CE, CheckerContext &C) const;
   ProgramStateRef postRetTaint(const CallExpr *CE, CheckerContext &C) const;
 
+  /// Taint the given argument to this function
+  ProgramStateRef postArg0Taint(const CallExpr *CE, CheckerContext &C) const;
+  ProgramStateRef postArg1Taint(const CallExpr *CE, CheckerContext &C) const;
+
+  // Artificially 'constrain' the argument to this function, this is a hacky
+  // way to 'untaint' a variable since svalCanEqual checks should fail later.
+  ProgramStateRef postArg1Constrain(const CallExpr *CE, CheckerContext &C) const;
+
   /// Taint the scanned input if the file is tainted.
   ProgramStateRef preFscanf(const CallExpr *CE, CheckerContext &C) const;
 
@@ -101,6 +126,12 @@
   bool checkSystemCall(const CallExpr *CE, StringRef Name,
                        CheckerContext &C) const;
 
+  /// Check if a given tainted sval can actually equal a given value (tries to
+  /// account for ConstraintManager shortcomings.)
+  bool taintValidate(CheckerContext &C, ProgramStateRef State, SymbolRef Sym, uint64_t arg) const;
+  bool __svalCanEqual(CheckerContext &C, DefinedOrUnknownSVal V, uint64_t arg) const;
+  bool svalCanEqual(CheckerContext &C, DefinedOrUnknownSVal V, uint64_t arg) const;
+
   /// Check if tainted data is used as a buffer size ins strn.. functions,
   /// and allocators.
   static const char MsgTaintedBufferSize[];
@@ -297,10 +328,10 @@
 
   // Process all other functions which could be defined as builtins.
   if (Rule.isNull()) {
-    if (C.isCLibraryFunction(FDecl, "snprintf") ||
+    /*if (C.isCLibraryFunction(FDecl, "snprintf") ||
         C.isCLibraryFunction(FDecl, "sprintf"))
       return TaintPropagationRule(InvalidArgIndex, 0, true);
-    else if (C.isCLibraryFunction(FDecl, "strcpy") ||
+    else*/ if (C.isCLibraryFunction(FDecl, "strcpy") ||
              C.isCLibraryFunction(FDecl, "stpcpy") ||
              C.isCLibraryFunction(FDecl, "strcat"))
       return TaintPropagationRule(1, 0, true);
@@ -330,6 +361,86 @@
   addSourcesPre(CE, C);
 }
 
+void GenericTaintChecker::checkPreStmt(const ArraySubscriptExpr *CE,
+                                       CheckerContext &C) const {
+  generateReportIfTainted(CE->getIdx(), "Tainted array subscript", C);
+}
+
+void GenericTaintChecker::checkBeginFunction(CheckerContext &C) const {
+  const auto *LCtx = C.getLocationContext();
+  const auto *FD = dyn_cast<FunctionDecl>(LCtx->getDecl());
+  if (!FD)
+    return;
+
+  SymbolManager &SM = C.getSymbolManager();
+  ProgramStateRef State = C.getState();
+  ArrayRef<ParmVarDecl *> parameters = FD->parameters();
+
+  // Linux syscall naming convention
+  if (FD->getIdentifier() &&
+      (!strncmp(FD->getIdentifier()->getNameStart(), "SYSC_", 5) ||
+      !strncmp(FD->getIdentifier()->getNameStart(), "C_SYSC_", 7))) {
+    for (const auto *PVD : parameters) {
+      const VarRegion *VR = State->getRegion(PVD, LCtx)->getAs<VarRegion>();
+      State = State->addTaint(SM.getRegionValueSymbol(VR));
+    }
+
+    C.addTransition(State);
+  }
+
+  // FreeBSD/XNU syscall/argument naming convention: type ends in '_args' and
+  // variable is named 'uap'
+  for (const auto *PVD : parameters) {
+    const IdentifierInfo *ArgType = PVD->getType().getBaseTypeIdentifier();
+    // TODO: speed-up by caching FD->getIdentifier() for uap
+    if (!strcmp(PVD->getNameAsString().c_str(), "uap") &&
+        (ArgType && ArgType->getLength() > 5 &&
+         !strcmp(ArgType->getNameStart() + ArgType->getLength() - 5, "_args"))) {
+
+      const VarRegion *VR = State->getRegion(PVD, LCtx)->getAs<VarRegion>();
+      State = State->addTaint(SM.getRegionValueSymbol(VR));
+      C.addTransition(State);
+    }
+  }
+
+#ifdef __APPLE__
+  // Initialize MachInteface to map routines to argument numbers for arguments
+  // that are IN/INOUT MIG functions.
+  if (MachInterface.empty()) {
+    ASTContext &Ctx = C.getASTContext();
+
+    MachInterface.insert(
+        std::make_pair(&Ctx.Idents.get("test_mach_interface"), 1));
+
+    for (size_t i = 0; i < sizeof(mig_routines) / sizeof(mig_routines[0]); i++) {
+      if (mig_routines[i].direction != IN || mig_routines[i].direction != INOUT)
+        continue;
+
+      IdentifierInfo *routine = &Ctx.Idents.get(mig_routines[i].routine);
+      MachInterface.insert(std::make_pair(routine, mig_routines[i].idx));
+    }
+  }
+
+  const size_t OutArgs = MachInterface.count(FD->getIdentifier());
+  if (OutArgs) {
+    std::multimap<const IdentifierInfo *, size_t>::const_iterator Args =
+          MachInterface.find(FD->getIdentifier());
+    for (size_t i = 0; i < OutArgs; i++, Args++) {
+      size_t argIndex = Args->second;
+      if (argIndex >= parameters.size())
+        // TODO: Warn or error out?
+        continue;
+
+      const ParmVarDecl *PVD = parameters[argIndex];
+      const VarRegion *VR = State->getRegion(PVD, LCtx)->getAs<VarRegion>();
+      State = State->addTaint(SM.getRegionValueSymbol(VR));
+    }
+
+    C.addTransition(State);
+  }
+#endif
+}
+
 void GenericTaintChecker::checkPostStmt(const CallExpr *CE,
                                         CheckerContext &C) const {
   if (propagateFromPre(CE, C))
@@ -436,6 +547,54 @@
     .Case("getch", &GenericTaintChecker::postRetTaint)
     .Case("wgetch", &GenericTaintChecker::postRetTaint)
     .Case("socket", &GenericTaintChecker::postSocket)
+
+    // Useful for when there's not a simple way to pin down taint source to a
+    // function call (e.g. get_user on Linux is a macro that just inlines some
+    // assembly, adding a call to this func fixes that.)
+    .Case("clang_analyzer_taint", &GenericTaintChecker::postArg0Taint)
+
+    .Case("copyin", &GenericTaintChecker::postArg1Taint)
+    .Case("copyinstr", &GenericTaintChecker::postArg1Taint)
+    .Case("copyin_nofault", &GenericTaintChecker::postArg1Taint)
+    .Case("sooptcopyin", &GenericTaintChecker::postArg1Taint)
+    // freebsd/sys/systm.h
+    .Case("fubyte", &GenericTaintChecker::postRetTaint)
+    .Case("fuword", &GenericTaintChecker::postRetTaint)
+    .Case("fuword16", &GenericTaintChecker::postRetTaint)
+    .Case("fuword32", &GenericTaintChecker::postRetTaint)
+    .Case("fuword64", &GenericTaintChecker::postRetTaint)
+    .Case("fueword", &GenericTaintChecker::postRetTaint)
+    .Case("fueword32", &GenericTaintChecker::postRetTaint)
+    .Case("fueword64", &GenericTaintChecker::postRetTaint)
+    .Case("subyte", &GenericTaintChecker::postRetTaint)
+    .Case("suword", &GenericTaintChecker::postRetTaint)
+    .Case("suword16", &GenericTaintChecker::postRetTaint)
+    .Case("suword32", &GenericTaintChecker::postRetTaint)
+    .Case("suword64", &GenericTaintChecker::postRetTaint)
+    .Case("casuword32", &GenericTaintChecker::postRetTaint)
+    .Case("casuword", &GenericTaintChecker::postRetTaint)
+    .Case("casueword32", &GenericTaintChecker::postRetTaint)
+    .Case("casueword", &GenericTaintChecker::postRetTaint)
+
+    .Case("copy_from_user", &GenericTaintChecker::postArg0Taint)
+    .Case("_copy_from_user", &GenericTaintChecker::postArg0Taint)
+    .Case("__copy_from_user", &GenericTaintChecker::postArg0Taint)
+    .Case("copy_in_user", &GenericTaintChecker::postArg0Taint)
+    .Case("_copy_in_user", &GenericTaintChecker::postArg0Taint)
+    .Case("__copy_in_user", &GenericTaintChecker::postArg0Taint)
+
+    // Linux
+    // access_ok() macro resolves to
+    .Case("__chk_range_not_ok", &GenericTaintChecker::postArg1Constrain)
+
+    // FreeBSD
+    .Case("fget_locked", &GenericTaintChecker::postArg1Constrain)
+    .Case("fget_unlocked", &GenericTaintChecker::postArg1Constrain)
+    .Case("copyinuio", &GenericTaintChecker::postArg1Constrain)
+
+    // XNU
+    .Case("fp_lookup", &GenericTaintChecker::postArg1Constrain)
+
     .Default(nullptr);
 
   // If the callee isn't defined, it is not of security concern.
@@ -455,8 +614,10 @@
     return true;
 
   const FunctionDecl *FDecl = C.getCalleeDecl(CE);
-  if (!FDecl || FDecl->getKind() != Decl::Function)
-    return false;
+  if (!FDecl || FDecl->getKind() != Decl::Function) {
+    // Not a function? Might be a function pointer.
+    return generateReportIfTainted(CE->getCallee(), "Tainted function pointer", C);
+  }
 
   StringRef Name = C.getCalleeName(FDecl);
   if (Name.empty())
@@ -645,6 +806,36 @@
   return C.getState()->addTaint(CE, C.getLocationContext());
 }
 
+ProgramStateRef GenericTaintChecker::postArg0Taint(const CallExpr *CE,
+                                                  CheckerContext &C) const {
+  ProgramStateRef State = C.getState();
+  SymbolRef Sym = getPointedToSymbol(C, CE->getArg(0));
+  if (Sym)
+    State = State->addTaint(Sym);
+
+  return State;
+}
+
+ProgramStateRef GenericTaintChecker::postArg1Constrain(const CallExpr *CE,
+                                                  CheckerContext &C) const {
+  ProgramStateRef State = C.getState();
+  auto Arg = State->getSVal(CE->getArg(1), C.getLocationContext()).getAs<DefinedOrUnknownSVal>();
+  if (Arg)
+    State = State->assumeInclusiveRange(*Arg, llvm::APSInt::get(0), llvm::APSInt::get(65536), true);
+
+  return State;
+}
+
+ProgramStateRef GenericTaintChecker::postArg1Taint(const CallExpr *CE,
+                                                  CheckerContext &C) const {
+  ProgramStateRef State = C.getState();
+  SymbolRef Sym = getPointedToSymbol(C, CE->getArg(1));
+  if (Sym)
+    State = State->addTaint(Sym);
+
+  return State;
+}
+
 bool GenericTaintChecker::isStdin(const Expr *E, CheckerContext &C) {
   ProgramStateRef State = C.getState();
   SVal Val = State->getSVal(E, C.getLocationContext());
@@ -719,6 +910,20 @@
   else
     return false;
 
+  if (!TaintedSVal.isUnknownOrUndef()) {
+    DefinedOrUnknownSVal _V = TaintedSVal.castAs<DefinedOrUnknownSVal>();
+
+    // If the tainted value can't equal these 'interesting' values, ignore it, it's
+    // too constrained to be interesting.
+    if (!svalCanEqual(C, _V, 0x7FFFFFFF) &&
+        !svalCanEqual(C, _V, 0x80000000) &&
+        !svalCanEqual(C, _V, 0xFFFFFFFF) &&
+        !svalCanEqual(C, _V, 0x7FFFFFFFFFFFFFFF) &&
+        !svalCanEqual(C, _V, 0x8000000080000000) &&
+        !svalCanEqual(C, _V, 0xFFFFFFFFFFFFFFFF))
+      return false;
+  }
+
   // Generate diagnostic.
   if (ExplodedNode *N = C.generateNonFatalErrorNode()) {
     initBugType();
@@ -768,6 +973,84 @@
   return generateReportIfTainted(CE->getArg(ArgNum), MsgSanitizeSystemArgs, C);
 }
 
+bool GenericTaintChecker::__svalCanEqual(CheckerContext &C, DefinedOrUnknownSVal V, uint64_t arg) const {
+  ProgramStateRef State = C.getState();
+  SValBuilder &SVB = C.getSValBuilder();
+
+  NonLoc unsignedValue = SVB.makeIntVal(arg, true);
+  SVal Comparison = SVB.evalEQ(State, V, unsignedValue);
+  if (Comparison.isUnknownOrUndef())
+    return true;
+
+  ProgramStateRef TrueState, FalseState;
+  std::tie(TrueState, FalseState) = State->assume(Comparison.castAs<DefinedSVal>());
+  if (TrueState)
+    return true;
+
+  NonLoc signedValue = SVB.makeIntVal(arg, false);
+  Comparison = SVB.evalEQ(State, V, signedValue);
+  if (Comparison.isUnknownOrUndef())
+    return true;
+
+  std::tie(TrueState, FalseState) = State->assume(Comparison.castAs<DefinedSVal>());
+  if (TrueState)
+    return true;
+
+  return false;
+}
+
+bool GenericTaintChecker::taintValidate(CheckerContext &C, ProgramStateRef State, SymbolRef Sym, uint64_t arg) const {
+  if (!State->isTainted(Sym) || !__svalCanEqual(C, nonloc::SymbolVal(Sym), arg))
+    return false;
+
+  if (const SymIntExpr *symIntExpr = dyn_cast<SymIntExpr>(Sym)) {
+    // SimpleConstraintManager can't reason about & and % operations, perform a basic
+    // check here to rule out many FPs, (tainted OP NUM) != arg if NUM < arg
+    if (symIntExpr->getOpcode() == BO_And || symIntExpr->getOpcode() == BO_Rem) {
+      if ((uint64_t)symIntExpr->getRHS().getExtValue() < arg)
+        return false;
+    }
+
+    // Ditto for >>, hacky heuristic
+    if (symIntExpr->getOpcode() == BO_Shr) {
+      if (symIntExpr->getLHS()->getType().getTypePtr()->hasUnsignedIntegerRepresentation() &&
+          symIntExpr->getRHS().getExtValue() > 8) {
+        return false;
+      }
+    }
+
+    return taintValidate(C, State, symIntExpr->getLHS(), arg);
+  }
+
+  if (const IntSymExpr *ISE = dyn_cast<IntSymExpr>(Sym))
+    return taintValidate(C, State, ISE->getRHS(), arg);
+
+  // TODO: Left tainted with right untainted & or % should probably not warn.
+  if (const SymSymExpr *SSE = dyn_cast<SymSymExpr>(Sym))
+    return taintValidate(C, State, SSE->getLHS(), arg) ||
+           taintValidate(C, State, SSE->getRHS(), arg);
+
+  return true;
+}
+
+// Can V == arg? Actual check happens in __svalCanEqual() with taintValidate()
+// recursing into the symbolic values with some additional logic for overcoming
+// shortcomings in SimpleConstraintManager
+bool GenericTaintChecker::svalCanEqual(CheckerContext &C, DefinedOrUnknownSVal V, uint64_t arg) const {
+  if (V.getBaseKind() == DefinedOrUnknownSVal::LocKind)
+    return true;
+  else if (V.getSubKind() != nonloc::SymbolValKind) {
+    // the fuck???
+    //DPRINT(V);
+    return true;
+  }
+
+  ProgramStateRef State = C.getState();
+  SymbolRef Sym = V.castAs<nonloc::SymbolVal>().getSymbol(); //getAsSymbol() instead??
+
+  return taintValidate(C, State, Sym, arg);
+}
+
 // TODO: Should this check be a part of the CString checker?
 // If yes, should taint be a global setting?
 bool GenericTaintChecker::checkTaintedBufferSize(const CallExpr *CE,
@@ -776,6 +1059,7 @@
   // If the function has a buffer size argument, set ArgNum.
   unsigned ArgNum = InvalidArgIndex;
   unsigned BId = 0;
+  bool sanitizesArgIfNotCompound = false;
   if ( (BId = FDecl->getMemoryFunctionKind()) )
     switch(BId) {
     case Builtin::BImemcpy:
@@ -792,19 +1076,80 @@
 
   if (ArgNum == InvalidArgIndex) {
     if (C.isCLibraryFunction(FDecl, "malloc") ||
+        C.isCLibraryFunction(FDecl, "__MALLOC") ||
+        // TODO: kalloc_canblock on XNU, has sorta weird semantics, macro'd from kalloc()
         C.isCLibraryFunction(FDecl, "calloc") ||
-        C.isCLibraryFunction(FDecl, "alloca"))
+        C.isCLibraryFunction(FDecl, "alloca") ||
+        C.isCLibraryFunction(FDecl, "kmalloc") ||
+        C.isCLibraryFunction(FDecl, "vmalloc") ||
+        C.isCLibraryFunction(FDecl, "vzalloc") ||
+        C.isCLibraryFunction(FDecl, "kzalloc") ||
+        C.isCLibraryFunction(FDecl, "kcalloc") ||
+        C.isCLibraryFunction(FDecl, "kmalloc_array") ||
+        C.isCLibraryFunction(FDecl, "kmem_alloc")) {
       ArgNum = 0;
+      sanitizesArgIfNotCompound = true;
+    }
     else if (C.isCLibraryFunction(FDecl, "memccpy"))
       ArgNum = 3;
-    else if (C.isCLibraryFunction(FDecl, "realloc"))
-      ArgNum = 1;
-    else if (C.isCLibraryFunction(FDecl, "bcopy"))
+    else if (C.isCLibraryFunction(FDecl, "realloc") ||
+             C.isCLibraryFunction(FDecl, "memdup_user")) {
+       ArgNum = 1;
+      sanitizesArgIfNotCompound = true;
+    }
+    else if (C.isCLibraryFunction(FDecl, "copyin") ||
+             C.isCLibraryFunction(FDecl, "copyin_nofault") ||
+             C.isCLibraryFunction(FDecl, "copyinstr") ||
+             C.isCLibraryFunction(FDecl, "copy_from_user") ||
+             C.isCLibraryFunction(FDecl, "_copy_from_user") ||
+             C.isCLibraryFunction(FDecl, "__copy_from_user") ||
+             C.isCLibraryFunction(FDecl, "copy_in_user") ||
+             C.isCLibraryFunction(FDecl, "_copy_in_user") ||
+             C.isCLibraryFunction(FDecl, "__copy_in_user")) {
       ArgNum = 2;
+      sanitizesArgIfNotCompound = true;
+    }
+    else if (C.isCLibraryFunction(FDecl, "bcopy") ||
+             C.isCLibraryFunction(FDecl, "copyout") ||
+             C.isCLibraryFunction(FDecl, "copyout_nofault") ||
+             C.isCLibraryFunction(FDecl, "copyoutstr") ||
+             C.isCLibraryFunction(FDecl, "copy_to_user") ||
+             C.isCLibraryFunction(FDecl, "_copy_to_user") ||
+             C.isCLibraryFunction(FDecl, "__copy_to_user"))
+       ArgNum = 2;
   }
 
-  return ArgNum != InvalidArgIndex && CE->getNumArgs() > ArgNum &&
-         generateReportIfTainted(CE->getArg(ArgNum), MsgTaintedBufferSize, C);
+  if (ArgNum == InvalidArgIndex || CE->getNumArgs() < ArgNum)
+    return false;
+
+  // Some functions will sanitize an argument, so we're only interested in tainted values
+  // reaching them if they're something like (entries * sizeof(entry)) since that's the only
+  // way they could possible be abused. If they're not compound values, constrain their values
+  if (sanitizesArgIfNotCompound) {
+    const SVal &_Arg = C.getState()->getSVal(CE->getArg(ArgNum), C.getLocationContext());
+    Optional<NonLoc> Arg = _Arg.getAs<NonLoc>();
+    if (Arg) {
+      if (SymbolRef Sym = (*Arg).getAsSymbol()) {
+        bool simpleExpr = true;
+        for (SymExpr::symbol_iterator SI = Sym->symbol_begin(), SE = Sym->symbol_end();
+             SI != SE; ++SI) {
+          if (isa<BinarySymExpr>(*SI)) {
+            simpleExpr = false;
+            break;
+          }
+        }
+
+        if (simpleExpr) {
+          ProgramStateRef State = C.getState();
+          State = State->assumeInclusiveRange(*Arg, llvm::APSInt::get(0), llvm::APSInt::get(65536), true);
+          C.addTransition(State);
+          return false;
+        }
+      }
+    }
+   }
+
+  return generateReportIfTainted(CE->getArg(ArgNum), MsgTaintedBufferSize, C);
 }
 
 void ento::registerGenericTaintChecker(CheckerManager &mgr) {
diff -ur llvm-4.0.0-original/tools/clang/lib/StaticAnalyzer/Core/SimpleConstraintManager.cpp llvm-4.0.0/tools/clang/lib/StaticAnalyzer/Core/SimpleConstraintManager.cpp
--- llvm-4.0.0-original/tools/clang/lib/StaticAnalyzer/Core/SimpleConstraintManager.cpp	2017-03-18 17:57:36.000000000 -0400
+++ llvm-4.0.0/tools/clang/lib/StaticAnalyzer/Core/SimpleConstraintManager.cpp	2017-03-18 22:02:10.000000000 -0400
@@ -50,6 +50,10 @@
     }
 
     if (const SymSymExpr *SSE = dyn_cast<SymSymExpr>(SE)) {
+      if (SSE->getOpcode() == BO_GE || SSE->getOpcode() == BO_GT ||
+          SSE->getOpcode() == BO_LT || SSE->getOpcode() == BO_LE)
+        return true;
+
       if (BinaryOperator::isComparisonOp(SSE->getOpcode())) {
         // We handle Loc <> Loc comparisons, but not (yet) NonLoc <> NonLoc.
         if (Loc::isLocType(SSE->getLHS()->getType())) {
@@ -157,6 +161,24 @@
       BinaryOperator::Opcode Op = SSE->getOpcode();
       assert(BinaryOperator::isComparisonOp(Op));
 
+      // If this is a SymSymExpr of two NonLocs, one of which is not tainted,
+      // then constrain the tainted value with an artificial value (as if we know
+      // the second sym being compared against)
+      if (!Loc::isLocType(SSE->getLHS()->getType())) {
+        bool lhsTainted = State->isTainted(SSE->getLHS());
+        bool rhsTainted = State->isTainted(SSE->getRHS());
+
+        if (!Assumption)
+          Op = BinaryOperator::negateComparisonOp(Op);
+
+        if (lhsTainted && !rhsTainted)
+          State = assumeSymRel(State, SSE->getLHS(), Op, llvm::APSInt::get(0x01000000));
+        if (rhsTainted && !lhsTainted)
+          State = assumeSymRel(State, SSE->getRHS(), BinaryOperator::negateComparisonOp(Op), llvm::APSInt::get(0x01000000));
+
+        return State;
+      }
+
       // For now, we only support comparing pointers.
       assert(Loc::isLocType(SSE->getLHS()->getType()));
       assert(Loc::isLocType(SSE->getRHS()->getType()));
